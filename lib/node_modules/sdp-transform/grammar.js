var grammar = module.exports = {
        v: [ {
            name: "version",
            reg: /^(\d*)$/
        } ],
        o: [ {
            name: "origin",
            reg: /^(\S*) (\d*) (\d*) (\S*) IP(\d) (\S*)/,
            names: [ "username", "sessionId", "sessionVersion", "netType", "ipVer", "address" ],
            format: "%s %s %d %s IP%d %s"
        } ],
        s: [ {
            name: "name"
        } ],
        i: [ {
            name: "description"
        } ],
        u: [ {
            name: "uri"
        } ],
        e: [ {
            name: "email"
        } ],
        p: [ {
            name: "phone"
        } ],
        z: [ {
            name: "timezones"
        } ],
        r: [ {
            name: "repeats"
        } ],
        t: [ {
            name: "timing",
            reg: /^(\d*) (\d*)/,
            names: [ "start", "stop" ],
            format: "%d %d"
        } ],
        c: [ {
            name: "connection",
            reg: /^IN IP(\d) (\S*)/,
            names: [ "version", "ip" ],
            format: "IN IP%d %s"
        } ],
        b: [ {
            push: "bandwidth",
            reg: /^(TIAS|AS|CT|RR|RS):(\d*)/,
            names: [ "type", "limit" ],
            format: "%s:%s"
        } ],
        m: [ {
            reg: /^(\w*) (\d*) ([\w\/]*)(?: (.*))?/,
            names: [ "type", "port", "protocol", "payloads" ],
            format: "%s %d %s %s"
        } ],
        a: [ {
            push: "rtp",
            reg: /^rtpmap:(\d*) ([\w\-\.]*)(?:\s*\/(\d*)(?:\s*\/(\S*))?)?/,
            names: [ "payload", "codec", "rate", "encoding" ],
            format: function(o) {
                if (o.encoding) {
                    return "rtpmap:%d %s/%s/%s";
                } else if (o.rate) {
                    return "rtpmap:%d %s/%s";
                } else {
                    return "rtpmap:%d %s";
                }
            }
        }, {
            push: "fmtp",
            reg: /^fmtp:(\d*) ([\S| ]*)/,
            names: [ "payload", "config" ],
            format: "fmtp:%d %s"
        }, {
            name: "control",
            reg: /^control:(.*)/,
            format: "control:%s"
        }, {
            name: "rtcp",
            reg: /^rtcp:(\d*)(?: (\S*) IP(\d) (\S*))?/,
            names: [ "port", "netType", "ipVer", "address" ],
            format: function(o) {
                if (o.address != null) {
                    return "rtcp:%d %s IP%d %s";
                } else {
                    return "rtcp:%d";
                }
            }
        }, {
            push: "rtcpFbTrrInt",
            reg: /^rtcp-fb:(\*|\d*) trr-int (\d*)/,
            names: [ "payload", "value" ],
            format: "rtcp-fb:%d trr-int %d"
        }, {
            push: "rtcpFb",
            reg: /^rtcp-fb:(\*|\d*) ([\w-_]*)(?: ([\w-_]*))?/,
            names: [ "payload", "type", "subtype" ],
            format: function(o) {
                if (o.subtype != null) {
                    return "rtcp-fb:%s %s %s";
                } else {
                    return "rtcp-fb:%s %s";
                }
            }
        }, {
            push: "ext",
            reg: /^extmap:([\w_\/]*) (\S*)(?: (\S*))?/,
            names: [ "value", "uri", "config" ],
            format: function(o) {
                if (o.config != null) {
                    return "extmap:%s %s %s";
                } else {
                    return "extmap:%s %s";
                }
            }
        }, {
            push: "crypto",
            reg: /^crypto:(\d*) ([\w_]*) (\S*)(?: (\S*))?/,
            names: [ "id", "suite", "config", "sessionConfig" ],
            format: function(o) {
                if (o.sessionConfig != null) {
                    return "crypto:%d %s %s %s";
                } else {
                    return "crypto:%d %s %s";
                }
            }
        }, {
            name: "setup",
            reg: /^setup:(\w*)/,
            format: "setup:%s"
        }, {
            name: "mid",
            reg: /^mid:([^\s]*)/,
            format: "mid:%s"
        }, {
            name: "msid",
            reg: /^msid:(.*)/,
            format: "msid:%s"
        }, {
            name: "ptime",
            reg: /^ptime:(\d*)/,
            format: "ptime:%d"
        }, {
            name: "maxptime",
            reg: /^maxptime:(\d*)/,
            format: "maxptime:%d"
        }, {
            name: "direction",
            reg: /^(sendrecv|recvonly|sendonly|inactive)/
        }, {
            name: "icelite",
            reg: /^(ice-lite)/
        }, {
            name: "iceUfrag",
            reg: /^ice-ufrag:(\S*)/,
            format: "ice-ufrag:%s"
        }, {
            name: "icePwd",
            reg: /^ice-pwd:(\S*)/,
            format: "ice-pwd:%s"
        }, {
            name: "fingerprint",
            reg: /^fingerprint:(\S*) (\S*)/,
            names: [ "type", "hash" ],
            format: "fingerprint:%s %s"
        }, {
            push: "candidates",
            reg: /^candidate:(\S*) (\d*) (\S*) (\d*) (\S*) (\d*) typ (\S*)(?: raddr (\S*) rport (\d*))?(?: tcptype (\S*))?(?: generation (\d*))?(?: network-id (\d*))?(?: network-cost (\d*))?/,
            names: [ "foundation", "component", "transport", "priority", "ip", "port", "type", "raddr", "rport", "tcptype", "generation", "network-id", "network-cost" ],
            format: function(o) {
                var str = "candidate:%s %d %s %d %s %d typ %s";
                str += o.raddr != null ? " raddr %s rport %d" : "%v%v";
                str += o.tcptype != null ? " tcptype %s" : "%v";
                if (o.generation != null) {
                    str += " generation %d";
                }
                str += o["network-id"] != null ? " network-id %d" : "%v";
                str += o["network-cost"] != null ? " network-cost %d" : "%v";
                return str;
            }
        }, {
            name: "endOfCandidates",
            reg: /^(end-of-candidates)/
        }, {
            name: "remoteCandidates",
            reg: /^remote-candidates:(.*)/,
            format: "remote-candidates:%s"
        }, {
            name: "iceOptions",
            reg: /^ice-options:(\S*)/,
            format: "ice-options:%s"
        }, {
            push: "ssrcs",
            reg: /^ssrc:(\d*) ([\w_]*)(?::(.*))?/,
            names: [ "id", "attribute", "value" ],
            format: function(o) {
                var str = "ssrc:%d";
                if (o.attribute != null) {
                    str += " %s";
                    if (o.value != null) {
                        str += ":%s";
                    }
                }
                return str;
            }
        }, {
            push: "ssrcGroups",
            reg: /^ssrc-group:(\w*) (.*)/,
            names: [ "semantics", "ssrcs" ],
            format: "ssrc-group:%s %s"
        }, {
            name: "msidSemantic",
            reg: /^msid-semantic:\s?(\w*) (\S*)/,
            names: [ "semantic", "token" ],
            format: "msid-semantic: %s %s"
        }, {
            push: "groups",
            reg: /^group:(\w*) (.*)/,
            names: [ "type", "mids" ],
            format: "group:%s %s"
        }, {
            name: "rtcpMux",
            reg: /^(rtcp-mux)/
        }, {
            name: "rtcpRsize",
            reg: /^(rtcp-rsize)/
        }, {
            name: "sctpmap",
            reg: /^sctpmap:([\w_\/]*) (\S*)(?: (\S*))?/,
            names: [ "sctpmapNumber", "app", "maxMessageSize" ],
            format: function(o) {
                if (o.maxMessageSize != null) {
                    return "sctpmap:%s %s %s";
                } else {
                    return "sctpmap:%s %s";
                }
            }
        }, {
            push: "invalid",
            names: [ "value" ]
        } ]
    };

Object.keys(grammar).forEach(function(key) {
    var objs = grammar[key];
    objs.forEach(function(obj) {
        if (!obj.reg) {
            obj.reg = /(.*)/;
        }
        if (!obj.format) {
            obj.format = "%s";
        }
    });
});