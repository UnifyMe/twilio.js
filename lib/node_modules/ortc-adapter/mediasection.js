"use strict";

function MediaSection(address, _candidates, capabilities, direction, kind, mid, port, rtcpMux, streamId, track) {
    if (!(this instanceof MediaSection)) {
        return new MediaSection(address, _candidates, capabilities, direction, kind, mid, port, rtcpMux, streamId, track);
    }
    var rejected = false;
    address = address || "0.0.0.0";
    port = typeof port === "number" ? port : 9;
    rtcpMux = typeof rtcpMux === "boolean" ? rtcpMux : true;
    streamId = streamId || null;
    track = track || null;
    Object.defineProperties(this, {
        _address: {
            get: function() {
                return address;
            },
            set: function(_address) {
                address = _address;
            }
        },
        _candidates: {
            value: []
        },
        _port: {
            get: function() {
                return port;
            },
            set: function(_port) {
                port = _port;
            }
        },
        _rejected: {
            get: function() {
                return rejected;
            },
            set: function(_rejected) {
                rejected = _rejected;
            }
        },
        _streamId: {
            get: function() {
                return streamId;
            },
            set: function(_streamId) {
                streamId = _streamId;
            }
        },
        _track: {
            get: function() {
                return track;
            },
            set: function(_track) {
                track = _track;
            }
        },
        _triples: {
            value: new Set()
        },
        candidates: {
            enumerable: true,
            get: function() {
                return this._candidates.slice();
            }
        },
        capabilities: {
            enumerable: true,
            value: capabilities
        },
        defaultCandidate: {
            enumerable: true,
            get: function() {
                if (this._candidates.length) {
                    return this._candidates[0];
                } else {
                    return null;
                }
            }
        },
        direction: {
            enumerable: true,
            value: direction
        },
        kind: {
            enumerable: true,
            value: kind
        },
        port: {
            enumerable: true,
            get: function() {
                return port;
            }
        },
        rtcpMux: {
            enumerable: true,
            value: rtcpMux
        },
        streamId: {
            enumerable: true,
            get: function() {
                return streamId;
            }
        },
        track: {
            enumerable: true,
            get: function() {
                return track;
            }
        }
    });
    if (_candidates) {
        _candidates.forEach(this.addCandidate, this);
    }
}

MediaSection.prototype.addCandidate = function addCandidate(candidate) {
    var triple = [ candidate.ip, candidate.port, candidate.protocol ].join(" ");
    if (!this._triples.has(triple)) {
        this._triples.add(triple);
        this._candidates.push(candidate);
        return true;
    }
    return false;
};

MediaSection.prototype.copy = function copy(address, candidates, capabilities, direction, port, streamId, track) {
    return new MediaSection(this.address, candidates, capabilities || this.capabilities, direction || this.direction, this.kind, this.mid, port, this.rtcpMux, streamId, track);
};

MediaSection.prototype.copyAndReject = function copyAndReject() {
    var mediaSection = new MediaSection(null, this.candidates, this.capabilities, this.direction, this.kind, this.mid, null, this.rtcpMux);
    return mediaSection.reject();
};

MediaSection.prototype.reject = function reject() {
    this.setPort(0);
    return this;
};

MediaSection.prototype.setAddress = function setAddress(address) {
    this._address = address;
    return this;
};

MediaSection.prototype.setPort = function setPort(port) {
    this._port = port;
    return this;
};

module.exports = MediaSection;